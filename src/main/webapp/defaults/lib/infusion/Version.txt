This is a custom build of Fluid Infusion 1.3 including: json, fss, framework, renderer, inlineEdit, pager and jQueryUIWidgets.

It was built from commit 4115f5b35da7ff339a6f66f7034e92e9b5036cc9 of Infusion project master, at
    http://github.com/fluid-project/infusion
    
Line 26013 (the body of fluid.pager.selfRender): was replaced FROM:
{code}
var template = fluid.selfRender(root, {}, options.renderOptions);
{code}
TO:
{code}
    var template;
    if (options.template) {
        template = fluid.render($(that.options.selectors.root, options.template).html(), root, {}, options.renderOptions);
    } else {
        template = fluid.selfRender(root, {}, options.renderOptions);
    }
{code}

In framework
{code}
    fluid.lifecycleFunctions = {
        preInitFunction: true,
        postInitFunction: true,
        finalInitFunction: true
    };
{code}
TO:
{code}
    fluid.lifecycleFunctions = {
        preInitFunction: true,
        postInitFunction: true,
        finalInitFunction: true,
        clearFunction: false
    };
{code}
AND
{code}
    fluid.defaults("fluid.eventedComponent", {
        gradeNames: ["fluid.littleComponent"],
        mergePolicy: {
            listeners: fluid.mergeListenersPolicy
        }
    });
{code}
TO:
{code}
    fluid.clearEventedComponent = function (that) {
        // Remove all declaratively attached event listeners that have a namespace.
        fluid.each(that.options.listeners, function (listener, eventName) {
            var namespace = listener.namespace;
            if (!namespace) {
                return;
            }
            that.events[eventName].removeListener(namespace);
        });
    };

    fluid.defaults("fluid.eventedComponent", {
        gradeNames: ["fluid.littleComponent"],
        mergePolicy: {
            listeners: fluid.mergeListenersPolicy
        },
        clearFunction: {
            namespace: "clearEventedComponent",
            listener: "fluid.clearEventedComponent"
        }
    });
{code}
AND
{code}
    that.clearComponent = function(component, name, child, options, noModTree) {
            options = options || {visited: {}, flat: true};
            child = child || component[name];
            fluid.visitComponentChildren(child, function(gchild, gchildname) {
                that.clearComponent(child, gchildname, null, options, noModTree);
            }, options);
            var path = that.idToPath[child.id];
            delete that.idToPath[child.id];
            delete that.pathToComponent[path];
            if (!noModTree) {
                delete component[name];
            }
        };
{code}
TO:
{code}
    that.clearComponent = function(component, name, child, options, noModTree) {
            options = options || {visited: {}, flat: true};
            child = child || component[name];
            fluid.fireEvent(fluid.get(child, "options.clearFunction"), child);
            fluid.visitComponentChildren(child, function(gchild, gchildname) {
                that.clearComponent(child, gchildname, null, options, noModTree);
            }, options);
            var path = that.idToPath[child.id];
            delete that.idToPath[child.id];
            delete that.pathToComponent[path];
            if (!noModTree) {
                delete component[name];
            }
        };
{code}

In Data Binding:
{code}
    fluid.makeSuperApplier = function () {
        var subAppliers = [];
        var that = {};
        that.addSubApplier = function (path, subApplier) {
            subAppliers.push({path: path, subApplier: subApplier});
        };
        that.fireChangeRequest = function (request) {
            for (var i = 0; i < subAppliers.length; ++i) {
                var path = subAppliers[i].path;
                if (request.path.indexOf(path) === 0) {
                    var subpath = request.path.substring(path.length + 1);
                    var subRequest = fluid.copy(request);
                    subRequest.path = subpath;
                    // TODO: Deal with the as yet unsupported case of an EL rvalue DAR
                    subAppliers[i].subApplier.fireChangeRequest(subRequest);
                }
            }
        };
        bindRequestChange(that);
        return that;
    };
{code}
TO:
{code}
    fluid.makeSuperApplier = function () {
        var subAppliers = {},
            listeners = {};
            var that = fluid.makeChangeApplier();

        that.addSubApplier = function (path, subApplier) {
            subAppliers[path] = subApplier;
            fluid.remove_if(listeners, function (thisListeners, seg) {
                if (seg !== path) {
                    return;
                }
                fluid.each(thisListeners, function (listener) {
                    subApplier.modelChanged.addListener(listener.spec, listener.listener, listener.namespace);
                });
                return true;
            });
        };

        that.fireChangeRequest = function (request) {
            fluid.find(subAppliers, function (subApplier, path) {
                if (request.path.indexOf(path) !== 0) {
                    return;
                }
                var subpath = request.path.substring(path.length + 1);
                var subRequest = fluid.copy(request);
                subRequest.path = subpath;
                // TODO: Deal with the as yet unsupported case of an EL rvalue DAR
                subApplier.fireChangeRequest(subRequest);
                return true;
            });
        };
        bindRequestChange(that);

        that.modelChanged.addListener = function (spec, listener, namespace) {
            var path = spec.path || spec,
                seg = fluid.model.parseEL(path)[0],
                subApplier = fluid.find(subAppliers, function (subApplier, path) {
                    if (path.indexOf(seg) === 0) {
                        return subApplier;
                    }
                });
            var subpath = path.substring(seg.length + 1);
            var subSpec = fluid.copy(spec);
            if (subSpec.path) {
                subSpec.path = subpath;
            } else {
                subSpec = subpath;
            }
            if (subApplier) {
                subApplier.modelChanged.addListener(subSpec, listener, namespace);
                return;
            }
            listeners[seg] = fluid.makeArray(listeners[seg]);
            listeners[seg].push({
                spec: subSpec,
                listener: listener,
                namespace: namespace
            });
        };

        that.modelChanged.removeListener = function (listener) {
            fluid.each(subAppliers, function (subApplier) {
                subApplier.modelChanged.removeListener(listener);
            });
            // Here we still don't know if the listener is removed so we need to check
            // the ones that are registered but not attached.
            if (typeof (listener) !== "string") {
                return;
            }
            fluid.find(listeners, function (thisListeners) {
                fluid.remove_if(thisListeners, function (listener) {
                    if (listener.namespace === listener) {
                        return true;
                    }
                });
            });
        };

        return that;
    };
{code}

using the following command:
   ant customBuild -Dinclude="json, fss, framework, renderer, inlineEdit, uploader, pager, jQueryUIWidgets" -Djsfilename="CSpaceInfusion.js" -DnoMinify="true"