<project name="ui-layer-tenant-management" default="clone-from-template" basedir=".">
  <description>Manage UI layer folders and files containing per-tenant configurations</description>
  
  <!-- 'environment' must be declared to bring values of system -->
  <!-- environment variables into Ant, prior to reading any -->
  <!-- properties files that may reference those values. -->
  <property environment="env" />
  
  <!-- If a 'tenant.properties' file is provided, values for -->
  <!-- properties used in this Ant buildfile will be read -->
  <!-- from that file. -->
  <!-- Values for those properties can also be provided at the command -->
  <!-- line when invoking Ant, via -Dvariable.name=somevalue arguments. -->
  <!-- Where there are conflicts, values provided via the command line -->
  <!-- are used in preference to those provided in this properties file. -->
  <property file="tenant.properties" />
  <property name="src.dir" value="." />
  <property name="tenants.dir" value="${src.dir}/src/main/webapp/tenants"/>
    
  <target name="clone-from-template" if="${template.exists}" unless="${tenant.exists}"
    depends="template-exists-message,tenant-exists-message">
    <echo message="Cloning configuration from template tenant '${template.tenant.shortname}' to new tenant '${tenant.shortname}' ..."/>
    <copy todir="${tenants.dir}/${tenant.shortname}">
      <fileset dir="${tenants.dir}/${template.tenant.shortname}"/>
    </copy>
  </target>
  
  <target name="check-template-properties">
    <echo message="Checking that required template properties have been set ..."/>
    <!-- Short name of the existing tenant to use as a template, when -->
    <!-- creating a new tenant -->  
    <antcall target="check-property-is-present">
      <param name="property-to-check" value="template.tenant.shortname"/>
    </antcall>
    <echo message="template.tenant.shortname=${template.tenant.shortname}"/>
  </target>  
  
  <target name="check-tenant-properties">
    <echo message="Checking that required tenant properties have been set ..."/>
    <!-- Short name of the new tenant to create -->
    <antcall target="check-property-is-present">
      <param name="property-to-check" value="tenant.shortname"/>
    </antcall>
    <echo message="tenant.shortname=${tenant.shortname}"/>
  </target>
  
  <target name="check-tenant-extended-properties">
    <echo message="Checking that required tenant extended properties have been set ..."/>
    <!-- Short name of the new tenant to create -->
    <antcall target="check-property-is-present">
      <param name="property-to-check" value="tenant.internet.domain"/>
    </antcall>
    <echo message="tenant.internet.domain=${tenant.internet.domain}"/>
  </target>
  
  <target name="check-property-is-present">
    <fail message="${property-to-check} property is not set. It is usually defined in either a tenant.properties file, when added to the same directory as this Ant build.xml file, or by adding a -D${property-to-check}=somevalue argument when running 'ant'">
      <condition>
        <not><isset property="${property-to-check}"/></not>
      </condition>
    </fail>
  </target>
  
  <target name="template-exists" depends="check-template-properties">
    <condition property="template.exists">
      <available file="${tenants.dir}/${template.tenant.shortname}" type="dir"/>
    </condition>
  </target>
  
  <target name="tenant-exists" depends="check-tenant-properties">
    <condition property="tenant.exists">
      <available file="${tenants.dir}/${tenant.shortname}" type="dir"/>
    </condition>
  </target>
  
  <target name="template-exists-message" depends="template-exists" unless="${template.exists}">
    <echo message="Could not find 'template' tenant folder '${template.tenant.shortname}' in ${tenants.dir} ..."/>
  </target>
  
  <target name="tenant-exists-message" depends="tenant-exists" if="${tenant.exists}">
    <echo message="Tenant folder '${tenant.shortname}' already exists in ${tenants.dir} ..."/>
  </target>
  
  <target name="tenant-not-exists-message" depends="tenant-exists" unless="${template.exists}">
    <echo message="Could not find tenant folder '${tenant.shortname}' in ${tenants.dir} ..."/>
  </target>
    
</project>